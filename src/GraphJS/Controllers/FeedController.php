<?php

/*
 * This file is part of the Pho package.
 *
 * (c) Emre Sokullu <emre@phonetworks.org>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

 namespace GraphJS\Controllers;

use CapMousse\ReactRestify\Http\Request;
use CapMousse\ReactRestify\Http\Response;
use CapMousse\ReactRestify\Http\Session;
use GetStream\Stream\Client;
use Pho\Kernel\Kernel;
use PhoNetworksAutogenerated\User;
use PhoNetworksAutogenerated\Thread;
use PhoNetworksAutogenerated\UserOut\Start;
use PhoNetworksAutogenerated\UserOut\Reply;
use Pho\Lib\Graph\ID;
use Pho\Lib\Graph\TailNode;



/**
 * Takes care of Feed
 * 
 * @author Emre Sokullu <emre@phonetworks.org>
 */
class FeedController extends AbstractController
{

    public function generate(Request $request, Response $response, Kernel $kernel)
    {
        $data = $request->getQueryParams();
        $validation = $this->validator->validate($data, [
            'id' => 'required',
            'type' => 'required',
        ]);
        if($validation->fails()) {
            $this->fail($response, "Type and/or id fields unavailable.");
            return;
        }
        if($data["type"]!="wall"&&$data["type"]!="user"&&$data["type"]!="timeline") {
            $this->fail($response, "Invalid type.");
            return;
        }
        $client = new \GetStream\Stream\Client(getenv("STREAM_KEY"), getenv("STREAM_SECRET"));
        $feed = $client->feed($data["type"], $data["id"]);
        $token = $feed->getToken();
        return $this->succeed($response, [
            "token" => $token
        ]);
    }

    public function addFeedItem(Request $request, Response $response, Session $session, Kernel $kernel)
    {
        $data = $request->getQueryParams();
        $v = new Validator($data);

        $requiredRuleInputs = [];
        $isMediaProvided = ! empty($data['photo'])
            || ! empty($data['album'])
            || ! empty($data['video']);
        if (! $isMediaProvided) {
            $requiredRuleInputs[] = 'text';
        }

        $urlRuleInputs = [
            'photo',
            'album.*',
            'video',
        ];
        $v->rule('required', $requiredRuleInputs);
        $v->rule('url', $urlRuleInputs);

        if (! $v->validate()) {
            $this->fail($response, "Invalid data. Text, photo, album or video required");
            return;
        }

        $client = new Client(getenv("STREAM_KEY"), getenv("STREAM_SECRET"));

        if(is_null($userId = $this->dependOnSession($request, $response, $session))) {
            $this->fail($response, "User not logged in");
            return;
        }

        $feed = $client->feed("wall", $userId);
        $data = [
            "actor" => (string) $userId,
            "verb" => "_construct",
            "object" => "feed",
            "txt" => $data["text"] ?? null,
            "photo" => $data["photo"] ?? null,
            "album" => $data["album"] ?? [],
            "video" => $data["video"] ?? null,
        ];
        $ret = $feed->addActivity($data);
        return $this->succeed($response, $ret);
    }
}
