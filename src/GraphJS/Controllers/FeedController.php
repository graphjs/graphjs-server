<?php

/*
 * This file is part of the Pho package.
 *
 * (c) Emre Sokullu <emre@phonetworks.org>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

 namespace GraphJS\Controllers;

use CapMousse\ReactRestify\Http\Request;
use CapMousse\ReactRestify\Http\Response;
use CapMousse\ReactRestify\Http\Session;
use Pho\Kernel\Kernel;
use PhoNetworksAutogenerated\User;
use PhoNetworksAutogenerated\Thread;
use PhoNetworksAutogenerated\UserOut\Start;
use PhoNetworksAutogenerated\UserOut\Reply;
use Pho\Lib\Graph\ID;
use Pho\Lib\Graph\TailNode;



/**
 * Takes care of Feed
 * 
 * @author Emre Sokullu <emre@phonetworks.org>
 */
class FeedController extends AbstractController
{

    public function generate(Request $request, Response $response, Kernel $kernel)
    {
        $data = $request->getQueryParams();
        $validation = $this->validator->validate($data, [
            'id' => 'required',
            'type' => 'required',
        ]);
        if($validation->fails()) {
            $this->fail($response, "Type and/or id fields unavailable.");
            return;
        }
        if($data["type"]!="wall"&&$data["type"]!="user"&&$data["type"]!="timeline") {
            $this->fail($response, "Invalid type.");
            return;
        }
        $client = new \GetStream\Stream\Client(getenv("STREAM_KEY"), getenv("STREAM_SECRET"));
        $feed = $client->feed($data["type"], $data["id"]);
        $token = $feed->getToken();
        return $this->succeed($response, [
            "token" => $token
        ]);
    }
}
